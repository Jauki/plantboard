generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  rooms         Room[]
  sessions      Session[]
  Wishlist      Wishlist?
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id           Int          @id @default(autoincrement())
  userId       String
  roomColor    String
  roomLocation LocationType
  roomName     String
  roomSize     Size
  plants       Plant[]
  user         User         @relation(fields: [userId], references: [id])
}

model Wishlist {
  id     Int     @id @default(autoincrement())
  userId String  @unique
  plants Plant[] @relation("PlantOnWishlist")
  user   User    @relation(fields: [userId], references: [id])
}

model Plant {
  id               Int      @id @default(autoincrement())
  name             String
  roomId           Int?
  author           String?
  bibliography     String?
  family           String?
  familyCommonName String?
  genus            String?
  genusId          Int?
  imageUrl         String?
  isOnWishlist     Boolean
  rank             String?
  status           String?
  synonyms         String[] @default([])
  wishlistId       Int
  year             Int?
  room             Room?     @relation(fields: [roomId], references: [id])
  wishlist         Wishlist @relation("PlantOnWishlist", fields: [wishlistId], references: [id])
}

enum LocationType {
  OUTDOOR
  INDOOR
}

enum Size {
  S
  M
  L
}
